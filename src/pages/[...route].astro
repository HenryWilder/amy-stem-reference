---
import ModuleIndex from '../layouts/ModuleIndex.astro';
import { getGlossaryItem, type Kind } from '../scripts/glossary';
import { glossary, type ItemPath } from '../scripts/glossary';
import ItemPage from '../layouts/ItemPage.astro';

export function getStaticPaths(): { params: { route: string } }[] {
    const result: string[] = [];

    const childrenRecursively = (stack: ItemPath) => {
        result.push(stack.join('/'));
        const item = getGlossaryItem(stack);
        if (item.properties){
            for (const property of Object.keys(item.properties)) {
                childrenRecursively([...stack, property])
            }
        }
    }

    for (const module in glossary) {
        result.push(module);
        for (const child in glossary[module]) {
            childrenRecursively([module, child]);
        }
    }

    return result.map((path) =>
        ({ params: { route: path }})
    );
}

// console.log(getStaticPaths());

const { route } = Astro.params;

const path: ItemPath = route.split('/') as ItemPath; // Will be invalid for module pages
const item = getGlossaryItem(path);

type PageType = 'module' | Kind;
const pageType: PageType = !route.includes('/') ? 'module' : item.kind;
---

{pageType === 'module' ? <ModuleIndex module={route}/> : <ItemPage path={path}/>}
