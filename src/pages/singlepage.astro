---
import { getCollection } from "astro:content";
import PageBase from "../layouts/PageBase.astro";
import { kinds, type GlossaryEntry, type Kind, type ValidGlossarySlug } from "../scripts/glossary";
import ScopeBlock from "../components/ScopeBlock.astro";
import Ref from "../components/Ref.astro";
import Keyword from "../components/syntax/Keyword.astro";
import Comment from "../components/syntax/Comment.astro";
import Heading from "../components/Heading.astro";
import Punc from "../components/syntax/Punc.astro";
import '../styles/style.css';

const getChildren = async (parent: ValidGlossarySlug, filter?: (entry: GlossaryEntry) => boolean): Promise<GlossaryEntry[]> => {
    const parentPath = parent.split('/');
    return await getCollection('glossary', (entry: GlossaryEntry) => {
        const path = entry.slug.split('/');
        const isChild = path.length === parentPath.length + 1 && path.slice(0, -1).every((part, index) => part === parentPath[index]);
        return isChild && (!filter || filter(entry));
    });
};

interface GlossaryTreeNode {
    item: GlossaryEntry;
    childrenByKind: [Kind, GlossaryTreeNode[]][];
}

const getChildrenRecursively = async (root: GlossaryEntry): Promise<GlossaryTreeNode> => {
    const item: GlossaryEntry = root;

    const immediateChildrenByKind: [Kind, GlossaryEntry[]][] = await Promise.all(kinds
        .map(async (kind) => {
            const childItems: GlossaryEntry[] = await getChildren(item.slug, (entry) => entry.data.kind === kind);
            return [kind, childItems];
        })
    );

    const whereExisting: [Kind, GlossaryEntry[]][] = immediateChildrenByKind
        .filter(([_, entries]) => entries.length !== 0);

    const childrenByKindRecursively: [Kind, GlossaryTreeNode[]][] = await Promise.all(whereExisting
        .map(async ([kind, entries]: [Kind, GlossaryEntry[]]) => {
            const recursiveChildren: GlossaryTreeNode[] = await Promise.all(entries.map(getChildrenRecursively));
            return [kind, recursiveChildren];
        })
    );

    const node: GlossaryTreeNode = { item, childrenByKind: childrenByKindRecursively };
    return node;
};

const modules = await getCollection('glossary', (entry) => !entry.slug.includes('/'));

const tree: GlossaryTreeNode[] = await Promise.all(modules.map(getChildrenRecursively));

// Debug
const debugTreeRecursively = (nodes: GlossaryTreeNode[]) => {
    nodes.forEach((node: GlossaryTreeNode) => {
        console.group('- ' + node.item.slug.split('/').at(-1));
        node.childrenByKind.forEach(([kind, children]: [Kind, GlossaryTreeNode[]]) => {
            console.log(kind);
            debugTreeRecursively(children);
        });
        console.groupEnd();
    });
}
debugTreeRecursively(tree);

const properCase = (kind: Kind): string => {
    const mapping: Record<Kind, string> = {
        function:  'Functions',
        type:      'Types',
        field:     'Fields',
        parameter: 'Parameters',
        trait:     'Traits',
        module:    'Modules',
    };
    return mapping[kind];
}
---

<PageBase title="Amy's STEM Notes">
    {() => {
        const renderTree = async (nodes: GlossaryTreeNode[], depth: number) => {
            return nodes.map(async (node: GlossaryTreeNode) => {
                const { item } = node;
                const renderedChildren = await Promise.all(node.childrenByKind.map(
                    async ([kind, children]): Promise<[Kind, any[]]> => [kind, await renderTree(children, depth + 1)]
                ));
                const Description = (await item.render()).Content;
                return <>
                    <ScopeBlock>
                        {/* Title */}
                        <Fragment slot="summary">
                            <Heading depth={depth} id={item.slug.replace(/\//g, '+')}>
                                <Keyword tkn={item.data.kind}/> <Ref item={item} onPage/>
                            </Heading>
                        </Fragment>

                        {/* Aliases */}
                        {item.data.aliases && <>
                            <Heading depth={depth + 1}><Comment>Aliases</Comment></Heading>
                            <table class="alias-list">{
                                Object.entries(item.data.aliases).map(([alias, kind]) => <tr>
                                    <td><Keyword tkn="static"/> <Keyword tkn={kind}/></td>
                                    <td>&nbsp;<Ref item={item} overrideKind={kind}>{alias}</Ref></td>
                                    <td>&nbsp;<Punc ch={kind === item.data.kind ? '=' : '~'}/>&nbsp;<Ref item={item}/><Punc ch=";"/></td>
                                </tr>)
                            }</table>
                        </>}

                        {/* Description */}
                        <Heading depth={depth + 1}><Comment>Description</Comment></Heading>
                        <div class="item-description" style="margin-bottom: 1em">
                            <Description/>
                        </div>

                        {/* Children */}
                        {renderedChildren.map(([kind, children]) => <>
                            <Heading depth={depth + 1}><Comment>{properCase(kind)}</Comment></Heading>
                            {children}
                        </>)}
                    </ScopeBlock>
                </>
            });
        }
        return renderTree(tree, 1);
    }}
</PageBase>
