---
import { type MarkdownLayoutProps } from 'astro';
import ModulePage from './ModulePage.astro';
import type { ValidContentEntrySlug } from 'astro:content';
import { getEntry } from 'astro:content';
import Comment from '../components/syntax/Comment.astro';
import type { ValidKeyword } from '../scripts/keywordd';
import Keyword from '../components/syntax/Keyword.astro';
import Ref from '../components/Ref.astro';
import ScopeBlock from '../components/ScopeBlock.astro';
import Katex from '../components/Katex.astro';
import Field from '../components/Field.astro';
import Method from '../components/Method.astro';
import ScopeInline from '../components/ScopeInline.astro';
import type { GlossaryEntry, Kind } from '../scripts/glossary';
import { getEntries } from 'astro:content';
import Todo from '../components/Todo.astro';
import RefPath from '../components/RefPath.astro';
import ItemOverview from '../components/ItemOverview.astro';
import Punc from '../components/syntax/Punc.astro';

type Props = MarkdownLayoutProps<{
    slug: ValidContentEntrySlug<'glossary'>
}>;

const { frontmatter: { slug } } = Astro.props;

const item = await getEntry('glossary', slug);

const parameters: { param: GlossaryEntry, typeOptions: GlossaryEntry[] }[] | undefined = item.data.parameters && await Promise.all(
    item.data.parameters.map(async (ref) => {
        const param = await getEntry(ref);
        const typeOptions = await getEntries(param.data.typeUnion!);
        return { param, typeOptions };
    }
));

const members = item.data.members;
const traits: GlossaryEntry[] = (item.data.traits && item.data.traits.length !== 0) ? await getEntries(item.data.traits) : [];
---

<ModulePage title={slug.split('/').at(-1)!} item={item}>
    {item.data.aliases && <h2 id="aliases"><Comment>Aliases</Comment></h2>
    <table class="alias-list">
        {Object.entries(item.data.aliases).map(([alias, kind]) =>
            <tr>
                <td><Keyword tkn={kind}/></td>
                <td>&nbsp;</td>
                <td><Ref item={item} overrideKind={kind}>{alias}</Ref></td>
                <td>&nbsp;<Punc ch={kind === item.data.kind ? '=' : '~'}/>&nbsp;</td>
                <td><Ref item={item}/><Punc ch=';'/></td>
            </tr>
        )}
    </table>}

    <h1><Keyword tkn={item.data.kind}/> <Ref item={item}/>
    {traits.length !== 0 && <><Keyword tkn="implements"/> <Ref item={traits[0]}/>{
        traits.slice(1).map((trait) => <><Punc ch=" + "/><Ref item={trait}/></>)
    }</>}</h1>

    <ScopeBlock>
        {item.data.notation && <>
            <h2 id="notation"><Comment>Notation</Comment></h2>
            <Katex tex={item.data.notation}/>
        </>}

        <h2 id="description"><Comment>Description</Comment></h2>
        <div class="item-description"><slot/></div>

        {parameters && <>
            <h2><Comment>Parameters</Comment></h2>
            <ul class="parameter-list">
                {parameters.map(({ param, typeOptions }) => <>
                    <h3><Comment><Todo/></Comment></h3>
                    <li><Ref item={param}/><Punc ch=":"/> {typeOptions.map(type => <RefPath item={type} tooltips/>)}</li>
                </>)}
            </ul>
        </>}

        {members && members.types.length + members.fields.length + members.methods.length !== 0 && <>
            <h2><Comment>Members</Comment></h2>

            {members.types.length !== 0 && <>
                <h3 id="types"><Comment>Types</Comment></h3>
                {members.types.map(async (ref) => {
                    const type = await getEntry(ref);
                    return <ItemOverview item={type}/>
                })}
            </>}

            {members.fields.length !== 0 && <>
                <h3 id="fields"><Comment>Fields</Comment></h3>
                <ScopeBlock>
                    {members.fields.map(async (ref) => {
                        const field = await getEntry(ref);
                        return <Field item={field} symbol={''}/>
                    })}
                </ScopeBlock>
            </>}

            {members.methods.length !== 0 && <>
                <h3 id="methods"><Comment>Methods</Comment></h3>
                <ScopeBlock>
                    {members.methods.map(async (ref) => {
                        const method = await getEntry(ref);
                        return <Method item={method}/>;
                    })}
                </ScopeBlock>
            </>}
        </>}
    </ScopeBlock>
</ModulePage>
