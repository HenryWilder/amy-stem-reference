---
import { type GlossaryEntry } from '../scripts/glossary';
import LilRef from './LilRef.astro';
import type { ValidContentEntrySlug } from 'astro:content';
import Ref from './Ref.astro';
import { getEntries } from 'astro:content';
import Join from './Join.astro';
import Keyword from './syntax/Keyword.astro';

export interface Props {
    item: GlossaryEntry;
    tooltips?: true;
    /** If true: treats slug as id rather than path */
    onPage?: true;
}

const { item, tooltips, onPage } = Astro.props;

const slugs = item.slug.split('/').map((_, index, list) => list.slice(0, index + 1).join('/') as ValidContentEntrySlug<'glossary'>);
// console.log(slugs);
const path: GlossaryEntry[] = await getEntries(slugs.map((slug) => ({ collection: 'glossary', slug })));
---

{() => {
    const refOrLil = (referencing: GlossaryEntry) => tooltips
        ? <Ref item={referencing} onPage={onPage}/>
        : <LilRef item={referencing} onPage={onPage}/>

    return <Join list={path}>
        {(part: GlossaryEntry) => refOrLil(part)}
        <span slot="separator">
            {([prevProps, prev]: [GlossaryEntry, any], [nextProps, next]: [GlossaryEntry, any]) => {
                const staticity: 'static ' | 'instance ' | '' =
                    prevProps.data.kind !== 'module' ? (nextProps.data.isStatic ? 'static ' : 'instance ') : '';
                return <Keyword tkn={`${staticity}${nextProps.data.kind} separator`} prev={prev} next={next}/>
            }}
        </span>
    </Join>
}}
