---
import { type GlossaryEntry } from '../scripts/glossary';
import LilRef from './LilRef.astro';
import type { ValidContentEntrySlug } from 'astro:content';
import Ref from './Ref.astro';
import { getEntries } from 'astro:content';
import Join from './Join.astro';
import Keyword from './syntax/Keyword.astro';

export interface Props {
    item: GlossaryEntry;
    tooltips?: true;
    /** If true: treats slug as id rather than path */
    onPage?: true;
}

const { item, tooltips, onPage } = Astro.props;

const slugs = item.slug.split('/').map((_, index, list) => list.slice(0, index + 1).join('/') as ValidContentEntrySlug<'glossary'>);
// console.log(slugs);
const path: GlossaryEntry[] = await getEntries(slugs.map((slug) => ({ collection: 'glossary', slug })));
---

<Join list={path}>
    {(part: GlossaryEntry) =>
        tooltips
            ? <Ref item={part} onPage={onPage}/>
            : <LilRef item={part} onPage={onPage}/>
    }
    <span slot="separator">
        {(item: GlossaryEntry) =>
            <Keyword tkn={`${item.data.kind} separator`}/>
        }
    </span>
</Join>
