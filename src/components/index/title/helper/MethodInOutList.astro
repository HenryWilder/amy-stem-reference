---
import type { GlossaryEntry, GlossaryEntryOfKind } from '../../../../scripts/glossary';
import Join from '../../../Join.astro';
import Ref from '../../../Ref.astro';
import ScopeBlock from '../../../ScopeBlock.astro';
import Keyword from '../../../syntax/Keyword.astro';
import TypeUnion from '../../../TypeUnion.astro';

type ParamOrReturn = GlossaryEntryOfKind<'parameter'> | GlossaryEntryOfKind<'return'>;

interface Props {
    delim: 'paren' | 'brace';
    source: ParamOrReturn[];
}

const { delim, source } = Astro.props;
---

<ScopeBlock delim={delim} horizontal>
    <Join list={source}>
        {(srcItem: ParamOrReturn) => {
            const param = <Ref item={srcItem}/>;
            const paramType = <TypeUnion list={srcItem.data.typeUnion}/>;
            return <>
                {param}<Keyword
                    tkn="type annotation"
                    prev={param}
                    next={paramType}
                />
                {paramType}
            </>
        }}
        <span slot="separator">
            {([prevProps, _prev]: [GlossaryEntry, any], [nextProps, _next]: [GlossaryEntry, any]) => {
                const prev = <Ref item={prevProps}/>;
                const next = <Ref item={nextProps}/>;
                return <><Keyword tkn="separator" prev={prev} next={next}/> </>
            }}
        </span>
    </Join>
</ScopeBlock>
