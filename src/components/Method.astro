---
import { getEntry } from 'astro:content';
import type { GlossaryEntry } from '../scripts/glossary';
import Ref from './Ref.astro';
import ScopeBlock from './ScopeBlock.astro';
import ScopeInline from './ScopeInline.astro';
import Comment from './syntax/Comment.astro';
import Keyword from './syntax/Keyword.astro';
import Todo from './Todo.astro';
import RefPath from './RefPath.astro';
import { getEntries } from 'astro:content';

interface Props {
    item: GlossaryEntry;
}

const { item } = Astro.props;

if (item.data.kind !== 'function' || item.data.parameters === undefined) {
    throw new Error(`Expected a function; '${item}' is not a function`);
}

// console.log(item.data.parameters);

const parameters = await Promise.all(item.data.parameters!.map(async (ref) => {
    const param: GlossaryEntry = await getEntry(ref);
    const typeOptions: GlossaryEntry[] = await getEntries(param.data.type!);
    return  { param, typeOptions };
}));
---

<h3><Comment> <Todo/> </Comment></h3>
<Keyword tkn="function"/>
<Ref item={item}/><ScopeInline delim="()">
    <table class="parameter-list">
        {parameters.map(({ param, typeOptions }) => {
            return <tr>
                <td><Ref item={param}/></td>
                <td><RefPath item={typeOptions[0]}/>{typeOptions.slice(1).map((type) => <RefPath item={type}/>)}</td>
            </tr>
        })}
    </table>
</ScopeInline> <Keyword tkn="->"/> <Todo/>
<ScopeBlock>
    <Todo/>
</ScopeBlock>
