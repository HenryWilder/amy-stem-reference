---
interface PropsRequired {
    list?: any[];
    optional: true;
}

interface PropsOptional {
    list: any[];
    optional?: false;
}

type Props = PropsRequired | PropsOptional;

const { list, optional = false } = Astro.props;

// console.log('is optional?:', optional);

if (!Astro.slots.has('default')) {
    throw new Error(`Default slot is required for 'Join' component`);
}
---

{async () => {
    if (list === undefined) {
        return Astro.slots.has('if-undefined')
            ? await Astro.slots.render('if-undefined')
            : undefined;
    }

    const inner = await Promise.all(list.map(async (item, index) => {
        /// Template

        const isFinal = index === list.length - 1;
        const prevIndex = index - 1;

        const template = await Astro.slots.render('default', [item, index, list, isFinal]);
        // console.debug('template is:', template);

        /// Separator

        const sepIndex = prevIndex;

        const separator = Astro.slots.has('separator') && index > 0
            ? await Astro.slots.render('separator', [item, sepIndex, list, list[prevIndex], isFinal])
            : undefined;

        // if (separator) console.debug('separator is:', separator);

        // console.log('item', index, `(${isFinal ? 'the' : 'not the'} final item)`, 'is', item);

        return <>{separator}{template}</>;
    }));

    return Astro.slots.has('outer')
        ? await Astro.slots.render('outer', [list.length, inner])
        : inner;
}}
