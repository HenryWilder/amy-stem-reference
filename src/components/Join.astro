---
interface Props {
    list: any[];
}

const { list } = Astro.props;

if (!Astro.slots.has('default')) {
    throw new Error(`Default slot is required for 'Join' component`);
}

const hasSeparator = Astro.slots.has('separator');

const hasOuterSingle = Astro.slots.has('outer-single');
const hasOuterPlural = Astro.slots.has('outer-plural');
const hasOuterNumber = Astro.slots.has('outer-number');

const hasOuter = (hasOuterSingle && hasOuterPlural) || hasOuterNumber;

if (hasOuterSingle !== hasOuterPlural) {
    throw new Error(
        `'Join' component cannot have 'outer-single' nor 'outer-plural' slots without having both.\n` +
        `Missing slot: '${!hasOuterSingle ? 'outer-single' : 'outer-plural'}'.\n` +
        `\n` +
        `Tip 1: If the 'Join' component's outer doesn't change depending on whether the contents is singular vs plural, ` +
        `consider wrapping the component itself insead of using the 'outer-' slots.\n` +
        `\n` +
        `Tip 2: If the 'Join' component's outer changes depending on a function of the number of elements, ` +
        `consider using the 'outer-number' slot instead of the 'outer-plural' slot.`
    );
}

if (hasOuterNumber && (hasOuterSingle || hasOuterPlural)) {
    throw new Error(
        `'Join' component cannot have 'outer-single' nor 'outer-plural' slots alongside 'outer-number' slot.\n` +
        `\n` +
        `Tip 1: If the 'Join' component's outer only changes depending on whether the contents is singular vs plural, ` +
        `consider using the 'outer-single' and 'outer-plural' slots without the 'outer-number' slot.\n` +
        `\n` +
        `Tip 2: If the 'Join' component's outer changes depending on a function of the number of elements ` +
        `IN ADDITION TO whether the contents is singular vs plural, ` +
        `consider using the 'outer-number' slot with a condition for handling 1-element instances.`
    );
}
---

{async () => {
    const inner = list.map(async (item, index) => {
        /// Template

        const isFinal = index === list.length - 1;
        const prevIndex = index - 1;

        const template = await Astro.slots.render('default', [item, index, list, isFinal]);
        // console.debug('template is:', template);

        /// Separator

        const sepIndex = prevIndex;

        const separator = hasSeparator && index > 0
            ? await Astro.slots.render('separator', [item, sepIndex, list, list[prevIndex], isFinal])
            : undefined;

        // if (separator) console.debug('separator is:', separator);

        // console.log('item', index, `(${isFinal ? 'the' : 'not the'} final item)`, 'is', item);

        return <>{separator}{template}</>;
    });

    return hasOuter
        ? hasOuterNumber
            ? await Astro.slots.render('outer-number', [list.length, inner])
            : list.length === 1
                ? await Astro.slots.render('outer-single', [inner])
                : await Astro.slots.render('outer-plural', [inner])
        : inner
}}
